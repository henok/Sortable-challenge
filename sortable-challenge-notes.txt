Sample Product record:
{"product_name":"Sony_Cyber-shot_DSC-W310","manufacturer":"Sony","model":"DSC-W310","family":"Cyber-shot","announced-date":"2010-01-06T19:00:00.000-05:00"}

Sample listing records:
{"title":"Sony DSCW310 Cyber-Shot Digital Camera (12.1 MP, 4 x Optical Zoom, 2.7 inch LCD) - Black","manufacturer":"Sony","currency":"GBP","price":"58.47"}
{"title":"Sony DSCW310 Cyber-Shot Digital Camera (12.1 MP, 4 x Optical Zoom, 2.7 inch LCD) - Black","manufacturer":"Sony","currency":"GBP","price":"65.00"}
{"title":"Sony DSCW310 Cyber-Shot Digital Camera (12.1 MP, 4 x Optical Zoom, 2.7 inch LCD) - Black","manufacturer":"Sony","currency":"GBP","price":"89.99"}


Perform the following logic for each listing item:

1. read line from listings file
2. normalize and generate keywords list from title field
3. normalize and generate keywords list from manufacturer field
4. check if manufacturer key exists, create it if it doesnt.
5. add new listing record to manufacturer dict object using manufacturer key and store normalized title keywords and price



Listing data structure:

|-Manufacturer-key-dict
|----Product-dict
|--------keywords (title split into multiple string values tokenized by space)
|--------Price


Perform the following logic for each product:

1. read line from products file
2. normalize and generate keywords list from product name
3. look for matching manufacturer key in manfuacturer table
4. use manufacturer key to get all products under manufacturer tree
5. loop through all products under matching manufacturer and look for full keyword match
6. If full match is found, record the price in the results object
7. Continue checking entire document for matches
8. If second full match is found, remove the price from the result as there should not be more than one price per product.




